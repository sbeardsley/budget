{
    // Place your budget workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    // 	"scope": "javascript,typescript",
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }

    "create entity domain service": {
        "scope": "rust",
        "prefix": "serv_dom_create",
        "body": [
            "use crate::{",
            "    domain::{",
            "        errors::Create${1/(.*)/${1:/pascalcase}/}Error,",
            "        models::{New${1/(.*)/${1:/pascalcase}/}, ${1/(.*)/${1:/pascalcase}/}Draft},",
            "        usecases::Create${1/(.*)/${1:/pascalcase}/}UseCase,",
            "    },",
            "    repositories::Create${1/(.*)/${1:/pascalcase}/}RepositoryContract,",
            "};",
            "",
            "pub struct Create${1/(.*)/${1:/pascalcase}/}Service<R: Create${1/(.*)/${1:/pascalcase}/}RepositoryContract> {",
            "    repository: R,",
            "}",
            "",
            "impl<R: Create${1/(.*)/${1:/pascalcase}/}RepositoryContract> Create${1/(.*)/${1:/pascalcase}/}Service<R> {",
            "    pub fn new(repository: R) -> Self {",
            "        Self { repository }",
            "    }",
            "}",
            "",
            "impl<R: Create${1/(.*)/${1:/pascalcase}/}RepositoryContract> Create${1/(.*)/${1:/pascalcase}/}UseCase for Create${1/(.*)/${1:/pascalcase}/}Service<R> {",
            "    async fn create_${1/(.*)/${1:/downcase}/}(",
            "        &self,",
            "        ${1/(.*)/${1:/downcase}/}: ${1/(.*)/${1:/pascalcase}/}Draft,",
            "    ) -> Result<New${1/(.*)/${1:/pascalcase}/}, Create${1/(.*)/${1:/pascalcase}/}Error> {",
            "        self.repository.insert_${1/(.*)/${1:/downcase}/}(${1/(.*)/${1:/downcase}/}).await",
            "    }",
            "}"
        ]
    },
    "update entity domain service": {
        "scope": "rust",
        "prefix": "serv_dom_update",
        "body": [
            "use crate::{",
            "    domain::{",
            "        errors::Update${1/(.*)/${1:/pascalcase}/}Error,",
            "        models::{New${1/(.*)/${1:/pascalcase}/}, ${1/(.*)/${1:/pascalcase}/}Patch},",
            "        usecases::Update${1/(.*)/${1:/pascalcase}/}UseCase,",
            "    },",
            "    repositories::Update${1/(.*)/${1:/pascalcase}/}RepositoryContract,",
            "};",
            "use uuid::Uuid;",
            "",
            "pub struct Update${1/(.*)/${1:/pascalcase}/}Service<R: Update${1/(.*)/${1:/pascalcase}/}RepositoryContract> {",
            "    repository: R,",
            "}",
            "",
            "impl<R: Update${1/(.*)/${1:/pascalcase}/}RepositoryContract> Update${1/(.*)/${1:/pascalcase}/}Service<R> {",
            "    pub fn new(repository: R) -> Self {",
            "        Self { repository }",
            "    }",
            "}",
            "",
            "impl<R: Update${1/(.*)/${1:/pascalcase}/}RepositoryContract> Update${1/(.*)/${1:/pascalcase}/}UseCase for Update${1/(.*)/${1:/pascalcase}/}Service<R> {",
            "    async fn update_${1/(.*)/${1:/downcase}/}(",
            "        &self,",
            "        ${1/(.*)/${1:/downcase}/}_id: Uuid,",
            "        ${1/(.*)/${1:/downcase}/}: ${1/(.*)/${1:/pascalcase}/}Patch,",
            "    ) -> Result<New${1/(.*)/${1:/pascalcase}/}, Update${1/(.*)/${1:/pascalcase}/}Error> {",
            "        self.repository.update_${1/(.*)/${1:/downcase}/}(${1/(.*)/${1:/downcase}/}_id, ${1/(.*)/${1:/downcase}/}).await",
            "    }",
            "}"
        ]
    },
    "get one entity domain service": {
        "scope": "rust",
        "prefix": "serv_dom_getone",
        "body": [
            "use crate::{",
            "    domain::{",
            "        errors::GetOne${1/(.*)/${1:/pascalcase}/}Error,",
            "        models::{New${1/(.*)/${1:/pascalcase}/}},",
            "        usecases::GetOne${1/(.*)/${1:/pascalcase}/}UseCase,",
            "    },",
            "    repositories::GetOne${1/(.*)/${1:/pascalcase}/}RepositoryContract,",
            "};",
            "use uuid::Uuid;",
            "",
            "pub struct GetOne${1/(.*)/${1:/pascalcase}/}Service<R: GetOne${1/(.*)/${1:/pascalcase}/}RepositoryContract> {",
            "    repository: R,",
            "}",
            "",
            "impl<R: GetOne${1/(.*)/${1:/pascalcase}/}RepositoryContract> GetOne${1/(.*)/${1:/pascalcase}/}Service<R> {",
            "    pub fn new(repository: R) -> Self {",
            "        Self { repository }",
            "    }",
            "}",
            "",
            "impl<R: GetOne${1/(.*)/${1:/pascalcase}/}RepositoryContract> GetOne${1/(.*)/${1:/pascalcase}/}UseCase for GetOne${1/(.*)/${1:/pascalcase}/}Service<R> {",
            "    async fn get_one_${1/(.*)/${1:/downcase}/}(",
            "        &self,",
            "        ${1/(.*)/${1:/downcase}/}_id: Uuid,",
            "    ) -> Result<Option<New${1/(.*)/${1:/pascalcase}/}>, GetOne${1/(.*)/${1:/pascalcase}/}Error> {",
            "        self.repository.get_one_${1/(.*)/${1:/downcase}/}(${1/(.*)/${1:/downcase}/}_id).await",
            "    }",
            "}"
        ]
    },
    "get all entity domain service": {
        "scope": "rust",
        "prefix": "serv_dom_getall",
        "body": [
            "use crate::{",
            "    domain::{errors::GetAll${1/(.*)/${1:/pascalcase}/}sError,models::New${1/(.*)/${1:/pascalcase}/},",
            "usecases::GetAll${1/(.*)/${1:/pascalcase}/}sUseCase},",
            "    repositories::GetAll${1/(.*)/${1:/pascalcase}/}sRepositoryContract,",
            "};",
            "use uuid::Uuid;",
            "",
            "pub struct GetAll${1/(.*)/${1:/pascalcase}/}sService<R: GetAll${1/(.*)/${1:/pascalcase}/}sRepositoryContract> {",
            "    repository: R,",
            "}",
            "",
            "impl<R: GetAll${1/(.*)/${1:/pascalcase}/}sRepositoryContract> GetAll${1/(.*)/${1:/pascalcase}/}sService<R> {",
            "    pub fn new(repository: R) -> Self {",
            "        Self { repository }",
            "    }",
            "}",
            "",
            "impl<R: GetAll${1/(.*)/${1:/pascalcase}/}sRepositoryContract> GetAll${1/(.*)/${1:/pascalcase}/}sUseCase for GetAll${1/(.*)/${1:/pascalcase}/}sService<R> {",
            "    async fn get_all_${1/(.*)/${1:/downcase}/}s(",
            "        &self,",
            "        user_id: Uuid,",
            "    ) -> Result<Vec<New${1/(.*)/${1:/pascalcase}/}>, GetAll${1/(.*)/${1:/pascalcase}/}sError> {",
            "        self.repository.get_all_${1/(.*)/${1:/downcase}/}s(user_id).await",
            "    }",
            "}"
        ]
    }
}
